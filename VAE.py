{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import tensorflow as tf\n",
    "import matplotlib.pyplot as plt\n",
    "from tensorflow.keras import layers\n",
    "from tensorflow.keras.layers import Input,Dense,Lambda\n",
    "from tensorflow.keras.models import Model\n",
    "from tensorflow import keras\n",
    "import tensorflow.keras.backend as K\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.preprocessing import StandardScaler,MinMaxScaler"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Load and Define Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEID</th>\n",
       "      <th>VEHID</th>\n",
       "      <th>VEHYEAR</th>\n",
       "      <th>VEHAGE</th>\n",
       "      <th>MAKE</th>\n",
       "      <th>MODEL</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>VEHTYPE</th>\n",
       "      <th>WHOMAIN</th>\n",
       "      <th>OD_READ</th>\n",
       "      <th>...</th>\n",
       "      <th>HTEEMPDN</th>\n",
       "      <th>HBHTNRNT</th>\n",
       "      <th>HBPPOPDN</th>\n",
       "      <th>HBRESDN</th>\n",
       "      <th>GSYRGAL</th>\n",
       "      <th>GSTOTCST</th>\n",
       "      <th>FEGEMPG</th>\n",
       "      <th>FEGEMPGA</th>\n",
       "      <th>GSCOST</th>\n",
       "      <th>FEGEMPGF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>30000302</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>54402</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>389</td>\n",
       "      <td>...</td>\n",
       "      <td>750</td>\n",
       "      <td>0</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>281.905515</td>\n",
       "      <td>599.378109</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>30001828</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>20002</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23000</td>\n",
       "      <td>...</td>\n",
       "      <td>150</td>\n",
       "      <td>5</td>\n",
       "      <td>300</td>\n",
       "      <td>300</td>\n",
       "      <td>181.087696</td>\n",
       "      <td>517.714632</td>\n",
       "      <td>23</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.858917</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>30003349</td>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>98</td>\n",
       "      <td>98850</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1028</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>30003462</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12402</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2000</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>973.514073</td>\n",
       "      <td>2069.853172</td>\n",
       "      <td>24</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>30005679</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>54402</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2061</td>\n",
       "      <td>...</td>\n",
       "      <td>25</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>716.834357</td>\n",
       "      <td>1524.109315</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255761</th>\n",
       "      <td>40791875</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>30402</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7000</td>\n",
       "      <td>...</td>\n",
       "      <td>3000</td>\n",
       "      <td>20</td>\n",
       "      <td>7000</td>\n",
       "      <td>7000</td>\n",
       "      <td>936.466012</td>\n",
       "      <td>2177.283477</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.325000</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255886</th>\n",
       "      <td>40792866</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>58</td>\n",
       "      <td>XXXXX</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3000</td>\n",
       "      <td>...</td>\n",
       "      <td>350</td>\n",
       "      <td>5</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>592.627250</td>\n",
       "      <td>1260.024305</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255993</th>\n",
       "      <td>40793520</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>49</td>\n",
       "      <td>49402</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>...</td>\n",
       "      <td>3000</td>\n",
       "      <td>5</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1043.143184</td>\n",
       "      <td>2217.896266</td>\n",
       "      <td>25</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255996</th>\n",
       "      <td>40793555</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>20</td>\n",
       "      <td>20473</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6000</td>\n",
       "      <td>...</td>\n",
       "      <td>1500</td>\n",
       "      <td>30</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1255.847334</td>\n",
       "      <td>3096.082293</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.465333</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256023</th>\n",
       "      <td>40793748</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>12</td>\n",
       "      <td>12473</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4050</td>\n",
       "      <td>...</td>\n",
       "      <td>1500</td>\n",
       "      <td>40</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>455.894519</td>\n",
       "      <td>1033.284927</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.266500</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2496 rows × 60 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HOUSEID  VEHID  VEHYEAR  VEHAGE MAKE  MODEL  FUELTYPE  VEHTYPE  \\\n",
       "67      30000302      1     2017       1   54  54402         1        3   \n",
       "419     30001828      1     2017       1   20  20002         1        1   \n",
       "742     30003349      3     2017       1   98  98850         1        6   \n",
       "773     30003462      1     2017       1   12  12402         1        3   \n",
       "1340    30005679      1     2017       1   54  54402         1        3   \n",
       "...          ...    ...      ...     ...  ...    ...       ...      ...   \n",
       "255761  40791875      1     2017       1   30  30402         1        3   \n",
       "255886  40792866      1     2017       1   58  XXXXX         1        1   \n",
       "255993  40793520      1     2017       1   49  49402         1        3   \n",
       "255996  40793555      1     2017       1   20  20473         1        4   \n",
       "256023  40793748      1     2017       1   12  12473         1        3   \n",
       "\n",
       "        WHOMAIN  OD_READ  ...  HTEEMPDN  HBHTNRNT  HBPPOPDN  HBRESDN  \\\n",
       "67            1      389  ...       750         0      3000      750   \n",
       "419           2    23000  ...       150         5       300      300   \n",
       "742           2     1028  ...        25         5        50       50   \n",
       "773           1     2000  ...        25         0       750      300   \n",
       "1340          1     2061  ...        25         5        50       50   \n",
       "...         ...      ...  ...       ...       ...       ...      ...   \n",
       "255761        1     7000  ...      3000        20      7000     7000   \n",
       "255886        1     3000  ...       350         5       750      300   \n",
       "255993        1       55  ...      3000         5      7000     1500   \n",
       "255996        4     6000  ...      1500        30      7000     1500   \n",
       "256023        1     4050  ...      1500        40      3000      750   \n",
       "\n",
       "            GSYRGAL     GSTOTCST  FEGEMPG  FEGEMPGA    GSCOST  FEGEMPGF  \n",
       "67       281.905515   599.378109       22        -9  2.126167         1  \n",
       "419      181.087696   517.714632       23        -9  2.858917         1  \n",
       "742       -9.000000    -9.000000       14        -9 -9.000000         3  \n",
       "773      973.514073  2069.853172       24        -9  2.126167         1  \n",
       "1340     716.834357  1524.109315       22        -9  2.126167         1  \n",
       "...             ...          ...      ...       ...       ...       ...  \n",
       "255761   936.466012  2177.283477       22        -9  2.325000         1  \n",
       "255886   592.627250  1260.024305       22        -9  2.126167         1  \n",
       "255993  1043.143184  2217.896266       25        -9  2.126167         1  \n",
       "255996  1255.847334  3096.082293       20        -9  2.465333         1  \n",
       "256023   455.894519  1033.284927       20        -9  2.266500         1  \n",
       "\n",
       "[2496 rows x 60 columns]"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('../Data/vehicle.csv')\n",
    "df=df[df['VEHYEAR']>=2017]\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2496, 60)"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['HOUSEID', 'VEHID', 'VEHYEAR', 'VEHAGE', 'FUELTYPE', 'VEHTYPE',\n",
       "       'WHOMAIN', 'OD_READ', 'HFUEL', 'VEHOWNED', 'VEHOWNMO', 'ANNMILES',\n",
       "       'HYBRID', 'PERSONID', 'TRAVDAY', 'HOMEOWN', 'HHSIZE', 'HHVEHCNT',\n",
       "       'HHFAMINC', 'DRVRCNT', 'HHSTFIPS', 'NUMADLT', 'WRKCOUNT', 'TDAYDATE',\n",
       "       'LIF_CYC', 'MSACAT', 'MSASIZE', 'RAIL', 'URBAN', 'URBANSIZE', 'URBRUR',\n",
       "       'CENSUS_D', 'CENSUS_R', 'CDIVMSAR', 'HH_RACE', 'HH_HISP', 'SMPLSRCE',\n",
       "       'WTHHFIN', 'BESTMILE', 'BEST_FLG', 'BEST_EDT', 'BEST_OUT', 'HTHTNRNT',\n",
       "       'HTPPOPDN', 'HTRESDN', 'HTEEMPDN', 'HBHTNRNT', 'HBPPOPDN', 'HBRESDN',\n",
       "       'GSYRGAL', 'GSTOTCST', 'FEGEMPG', 'FEGEMPGA', 'GSCOST', 'FEGEMPGF'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = df.select_dtypes(['number'])\n",
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\yzc97\\Anaconda3\\envs\\mytensorflow\\lib\\site-packages\\pandas\\core\\indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "C:\\Users\\yzc97\\Anaconda3\\envs\\mytensorflow\\lib\\site-packages\\pandas\\core\\indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "C:\\Users\\yzc97\\Anaconda3\\envs\\mytensorflow\\lib\\site-packages\\pandas\\core\\indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "C:\\Users\\yzc97\\Anaconda3\\envs\\mytensorflow\\lib\\site-packages\\pandas\\core\\indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n",
      "C:\\Users\\yzc97\\Anaconda3\\envs\\mytensorflow\\lib\\site-packages\\pandas\\core\\indexing.py:1763: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  isetter(loc, value)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEID</th>\n",
       "      <th>VEHID</th>\n",
       "      <th>VEHYEAR</th>\n",
       "      <th>VEHAGE</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>VEHTYPE</th>\n",
       "      <th>WHOMAIN</th>\n",
       "      <th>OD_READ</th>\n",
       "      <th>HFUEL</th>\n",
       "      <th>VEHOWNED</th>\n",
       "      <th>...</th>\n",
       "      <th>HBHTNRNT</th>\n",
       "      <th>HBPPOPDN</th>\n",
       "      <th>HBRESDN</th>\n",
       "      <th>GSYRGAL</th>\n",
       "      <th>GSTOTCST</th>\n",
       "      <th>FEGEMPG</th>\n",
       "      <th>FEGEMPGA</th>\n",
       "      <th>GSCOST</th>\n",
       "      <th>FEGEMPGF</th>\n",
       "      <th>Fueltypechoice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>30000302</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>389</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>281.905515</td>\n",
       "      <td>599.378109</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>30001828</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23000</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>300</td>\n",
       "      <td>300</td>\n",
       "      <td>181.087696</td>\n",
       "      <td>517.714632</td>\n",
       "      <td>23</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.858917</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>30003349</td>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1028</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>30003462</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>973.514073</td>\n",
       "      <td>2069.853172</td>\n",
       "      <td>24</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>30005679</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2061</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>716.834357</td>\n",
       "      <td>1524.109315</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255761</th>\n",
       "      <td>40791875</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>7000</td>\n",
       "      <td>7000</td>\n",
       "      <td>936.466012</td>\n",
       "      <td>2177.283477</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.325000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255886</th>\n",
       "      <td>40792866</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>592.627250</td>\n",
       "      <td>1260.024305</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255993</th>\n",
       "      <td>40793520</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1043.143184</td>\n",
       "      <td>2217.896266</td>\n",
       "      <td>25</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255996</th>\n",
       "      <td>40793555</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>30</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1255.847334</td>\n",
       "      <td>3096.082293</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.465333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256023</th>\n",
       "      <td>40793748</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4050</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>455.894519</td>\n",
       "      <td>1033.284927</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.266500</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2492 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HOUSEID  VEHID  VEHYEAR  VEHAGE  FUELTYPE  VEHTYPE  WHOMAIN  OD_READ  \\\n",
       "67      30000302      1     2017       1         1        3        1      389   \n",
       "419     30001828      1     2017       1         1        1        2    23000   \n",
       "742     30003349      3     2017       1         1        6        2     1028   \n",
       "773     30003462      1     2017       1         1        3        1     2000   \n",
       "1340    30005679      1     2017       1         1        3        1     2061   \n",
       "...          ...    ...      ...     ...       ...      ...      ...      ...   \n",
       "255761  40791875      1     2017       1         1        3        1     7000   \n",
       "255886  40792866      1     2017       1         1        1        1     3000   \n",
       "255993  40793520      1     2017       1         1        3        1       55   \n",
       "255996  40793555      1     2017       1         1        4        4     6000   \n",
       "256023  40793748      1     2017       1         1        3        1     4050   \n",
       "\n",
       "        HFUEL  VEHOWNED  ...  HBHTNRNT  HBPPOPDN  HBRESDN      GSYRGAL  \\\n",
       "67         -1         2  ...         0      3000      750   281.905515   \n",
       "419        -1         1  ...         5       300      300   181.087696   \n",
       "742        -1         2  ...         5        50       50    -9.000000   \n",
       "773        -1         2  ...         0       750      300   973.514073   \n",
       "1340       -1         2  ...         5        50       50   716.834357   \n",
       "...       ...       ...  ...       ...       ...      ...          ...   \n",
       "255761     -1         2  ...        20      7000     7000   936.466012   \n",
       "255886     -1         2  ...         5       750      300   592.627250   \n",
       "255993     -1         2  ...         5      7000     1500  1043.143184   \n",
       "255996     -1         2  ...        30      7000     1500  1255.847334   \n",
       "256023     -1         2  ...        40      3000      750   455.894519   \n",
       "\n",
       "           GSTOTCST  FEGEMPG  FEGEMPGA    GSCOST  FEGEMPGF  Fueltypechoice  \n",
       "67       599.378109       22        -9  2.126167         1             0.0  \n",
       "419      517.714632       23        -9  2.858917         1             0.0  \n",
       "742       -9.000000       14        -9 -9.000000         3             0.0  \n",
       "773     2069.853172       24        -9  2.126167         1             0.0  \n",
       "1340    1524.109315       22        -9  2.126167         1             0.0  \n",
       "...             ...      ...       ...       ...       ...             ...  \n",
       "255761  2177.283477       22        -9  2.325000         1             0.0  \n",
       "255886  1260.024305       22        -9  2.126167         1             0.0  \n",
       "255993  2217.896266       25        -9  2.126167         1             0.0  \n",
       "255996  3096.082293       20        -9  2.465333         1             0.0  \n",
       "256023  1033.284927       20        -9  2.266500         1             0.0  \n",
       "\n",
       "[2492 rows x 56 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.loc[df['FUELTYPE'] == 1, 'Fueltypechoice'] = 0\n",
    "df.loc[df['FUELTYPE'] == 2, 'Fueltypechoice'] = 1\n",
    "df.loc[df['HFUEL'] == 2, 'Fueltypechoice'] = 2\n",
    "df.loc[df['HFUEL'] == 3, 'Fueltypechoice'] = 3\n",
    "df.loc[df['HFUEL'] == 4, 'Fueltypechoice'] = 4\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>HOUSEID</th>\n",
       "      <th>VEHID</th>\n",
       "      <th>VEHYEAR</th>\n",
       "      <th>VEHAGE</th>\n",
       "      <th>FUELTYPE</th>\n",
       "      <th>VEHTYPE</th>\n",
       "      <th>WHOMAIN</th>\n",
       "      <th>OD_READ</th>\n",
       "      <th>HFUEL</th>\n",
       "      <th>VEHOWNED</th>\n",
       "      <th>...</th>\n",
       "      <th>HBHTNRNT</th>\n",
       "      <th>HBPPOPDN</th>\n",
       "      <th>HBRESDN</th>\n",
       "      <th>GSYRGAL</th>\n",
       "      <th>GSTOTCST</th>\n",
       "      <th>FEGEMPG</th>\n",
       "      <th>FEGEMPGA</th>\n",
       "      <th>GSCOST</th>\n",
       "      <th>FEGEMPGF</th>\n",
       "      <th>Fueltypechoice</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>30000302</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>389</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>281.905515</td>\n",
       "      <td>599.378109</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>30001828</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23000</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>300</td>\n",
       "      <td>300</td>\n",
       "      <td>181.087696</td>\n",
       "      <td>517.714632</td>\n",
       "      <td>23</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.858917</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>742</th>\n",
       "      <td>30003349</td>\n",
       "      <td>3</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>1028</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>14</td>\n",
       "      <td>-9</td>\n",
       "      <td>-9.000000</td>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>773</th>\n",
       "      <td>30003462</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>973.514073</td>\n",
       "      <td>2069.853172</td>\n",
       "      <td>24</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1340</th>\n",
       "      <td>30005679</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2061</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>50</td>\n",
       "      <td>50</td>\n",
       "      <td>716.834357</td>\n",
       "      <td>1524.109315</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255761</th>\n",
       "      <td>40791875</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>7000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>20</td>\n",
       "      <td>7000</td>\n",
       "      <td>7000</td>\n",
       "      <td>936.466012</td>\n",
       "      <td>2177.283477</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.325000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255886</th>\n",
       "      <td>40792866</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>750</td>\n",
       "      <td>300</td>\n",
       "      <td>592.627250</td>\n",
       "      <td>1260.024305</td>\n",
       "      <td>22</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255993</th>\n",
       "      <td>40793520</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>55</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>5</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1043.143184</td>\n",
       "      <td>2217.896266</td>\n",
       "      <td>25</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.126167</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>255996</th>\n",
       "      <td>40793555</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>6000</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>30</td>\n",
       "      <td>7000</td>\n",
       "      <td>1500</td>\n",
       "      <td>1255.847334</td>\n",
       "      <td>3096.082293</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.465333</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256023</th>\n",
       "      <td>40793748</td>\n",
       "      <td>1</td>\n",
       "      <td>2017</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>4050</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>3000</td>\n",
       "      <td>750</td>\n",
       "      <td>455.894519</td>\n",
       "      <td>1033.284927</td>\n",
       "      <td>20</td>\n",
       "      <td>-9</td>\n",
       "      <td>2.266500</td>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2492 rows × 56 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         HOUSEID  VEHID  VEHYEAR  VEHAGE  FUELTYPE  VEHTYPE  WHOMAIN  OD_READ  \\\n",
       "67      30000302      1     2017       1         1        3        1      389   \n",
       "419     30001828      1     2017       1         1        1        2    23000   \n",
       "742     30003349      3     2017       1         1        6        2     1028   \n",
       "773     30003462      1     2017       1         1        3        1     2000   \n",
       "1340    30005679      1     2017       1         1        3        1     2061   \n",
       "...          ...    ...      ...     ...       ...      ...      ...      ...   \n",
       "255761  40791875      1     2017       1         1        3        1     7000   \n",
       "255886  40792866      1     2017       1         1        1        1     3000   \n",
       "255993  40793520      1     2017       1         1        3        1       55   \n",
       "255996  40793555      1     2017       1         1        4        4     6000   \n",
       "256023  40793748      1     2017       1         1        3        1     4050   \n",
       "\n",
       "        HFUEL  VEHOWNED  ...  HBHTNRNT  HBPPOPDN  HBRESDN      GSYRGAL  \\\n",
       "67         -1         2  ...         0      3000      750   281.905515   \n",
       "419        -1         1  ...         5       300      300   181.087696   \n",
       "742        -1         2  ...         5        50       50    -9.000000   \n",
       "773        -1         2  ...         0       750      300   973.514073   \n",
       "1340       -1         2  ...         5        50       50   716.834357   \n",
       "...       ...       ...  ...       ...       ...      ...          ...   \n",
       "255761     -1         2  ...        20      7000     7000   936.466012   \n",
       "255886     -1         2  ...         5       750      300   592.627250   \n",
       "255993     -1         2  ...         5      7000     1500  1043.143184   \n",
       "255996     -1         2  ...        30      7000     1500  1255.847334   \n",
       "256023     -1         2  ...        40      3000      750   455.894519   \n",
       "\n",
       "           GSTOTCST  FEGEMPG  FEGEMPGA    GSCOST  FEGEMPGF  Fueltypechoice  \n",
       "67       599.378109       22        -9  2.126167         1             0.0  \n",
       "419      517.714632       23        -9  2.858917         1             0.0  \n",
       "742       -9.000000       14        -9 -9.000000         3             0.0  \n",
       "773     2069.853172       24        -9  2.126167         1             0.0  \n",
       "1340    1524.109315       22        -9  2.126167         1             0.0  \n",
       "...             ...      ...       ...       ...       ...             ...  \n",
       "255761  2177.283477       22        -9  2.325000         1             0.0  \n",
       "255886  1260.024305       22        -9  2.126167         1             0.0  \n",
       "255993  2217.896266       25        -9  2.126167         1             0.0  \n",
       "255996  3096.082293       20        -9  2.465333         1             0.0  \n",
       "256023  1033.284927       20        -9  2.266500         1             0.0  \n",
       "\n",
       "[2492 rows x 56 columns]"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train,X_test=train_test_split(df,test_size=400)\n",
    "\n",
    "y_train = X_train['Fueltypechoice']\n",
    "y_test= X_test['Fueltypechoice']\n",
    "cols = [c for c in df.columns if c not in ['Fueltypechoice']]\n",
    "X_train = MinMaxScaler().fit_transform(X_train[cols])\n",
    "X_test = MinMaxScaler().fit_transform(X_test[cols])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def fit_batchsize(X,y,batch_size):\n",
    "    n_size = (len(X)//batch_size)*batch_size\n",
    "    X = X[0:n_size]\n",
    "    y = y[0:n_size]\n",
    "    return X, y\n",
    "batch_size = 100\n",
    "X_train, y_train = fit_batchsize(X_train,y_train, batch_size)\n",
    "X_test,y_test = fit_batchsize(X_test,y_test, batch_size)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "numpy.ndarray"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Define VAE Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Sampling(layers.Layer):\n",
    "    \"\"\"Uses (z_mean, z_log_var) to sample z, the vector encoding a digit.\"\"\"\n",
    "\n",
    "    def call(self, inputs):\n",
    "        z_mean, z_log_var = inputs\n",
    "        batch = tf.shape(z_mean)[0]\n",
    "        dim = tf.shape(z_mean)[1]\n",
    "        epsilon = tf.keras.backend.random_normal(shape=(batch, dim))\n",
    "        return z_mean + tf.exp(0.5 * z_log_var) * epsilon"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"encoder\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input_3 (InputLayer)            [(None, 55)]         0                                            \n",
      "__________________________________________________________________________________________________\n",
      "reshape_3 (Reshape)             (None, 55, 1)        0           input_3[0][0]                    \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_2 (Conv1D)               (None, 55, 12)       48          reshape_3[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "conv1d_3 (Conv1D)               (None, 55, 24)       888         conv1d_2[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "flatten_1 (Flatten)             (None, 1320)         0           conv1d_3[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "z_mean (Dense)                  (None, 10)           13210       flatten_1[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "z_log_var (Dense)               (None, 10)           13210       flatten_1[0][0]                  \n",
      "__________________________________________________________________________________________________\n",
      "sampling_1 (Sampling)           (None, 10)           0           z_mean[0][0]                     \n",
      "                                                                 z_log_var[0][0]                  \n",
      "==================================================================================================\n",
      "Total params: 27,356\n",
      "Trainable params: 27,356\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "latent_dim = 10\n",
    "\n",
    "encoder_inputs = keras.Input(shape=(55,))\n",
    "x = layers.Reshape((55,1))(encoder_inputs)\n",
    "x = layers.Conv1D(12,3, activation=\"relu\", strides=1, padding=\"same\")(x)\n",
    "x = layers.Conv1D(24,3,activation=\"relu\", strides=1, padding=\"same\")(x)\n",
    "x = layers.Flatten()(x)\n",
    "z_mean = layers.Dense(latent_dim, name=\"z_mean\")(x)\n",
    "z_log_var = layers.Dense(latent_dim, name=\"z_log_var\")(x)\n",
    "z = Sampling()([z_mean, z_log_var])\n",
    "encoder = keras.Model(encoder_inputs, [z_mean, z_log_var, z], name=\"encoder\")\n",
    "encoder.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"decoder\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_4 (InputLayer)         [(None, 10)]              0         \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 1320)              14520     \n",
      "_________________________________________________________________\n",
      "reshape_4 (Reshape)          (None, 55, 24)            0         \n",
      "_________________________________________________________________\n",
      "conv1d_transpose_3 (Conv1DTr (None, 55, 24)            1752      \n",
      "_________________________________________________________________\n",
      "conv1d_transpose_4 (Conv1DTr (None, 55, 12)            876       \n",
      "_________________________________________________________________\n",
      "conv1d_transpose_5 (Conv1DTr (None, 55, 1)             37        \n",
      "_________________________________________________________________\n",
      "reshape_5 (Reshape)          (None, 55)                0         \n",
      "=================================================================\n",
      "Total params: 17,185\n",
      "Trainable params: 17,185\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "latent_inputs = keras.Input(shape=(latent_dim,))\n",
    "x = layers.Dense(55 * 24, activation=\"relu\")(latent_inputs)\n",
    "x = layers.Reshape((55, 24))(x)\n",
    "x = layers.Conv1DTranspose(24, 3, activation=\"relu\", strides=1, padding=\"same\")(x)\n",
    "x = layers.Conv1DTranspose(12, 3, activation=\"relu\", strides=1, padding=\"same\")(x)\n",
    "x = layers.Conv1DTranspose(1, 3, activation=\"sigmoid\", padding=\"same\")(x)\n",
    "decoder_outputs=layers.Reshape((55,))(x)\n",
    "decoder = keras.Model(latent_inputs, decoder_outputs, name=\"decoder\")\n",
    "decoder.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "class VAE(keras.Model):\n",
    "    def __init__(self, encoder, decoder, **kwargs):\n",
    "        super(VAE, self).__init__(**kwargs)\n",
    "        self.encoder = encoder\n",
    "        self.decoder = decoder\n",
    "\n",
    "    def train_step(self, data):\n",
    "        if isinstance(data, tuple):\n",
    "            data = data[0]\n",
    "        with tf.GradientTape() as tape:\n",
    "            z_mean, z_log_var, z = encoder(data)\n",
    "            reconstruction = decoder(z)\n",
    "            reconstruction_loss = tf.reduce_mean(\n",
    "                keras.losses.binary_crossentropy(data, reconstruction)\n",
    "            )\n",
    "            reconstruction_loss *= 55\n",
    "            kl_loss = 1 + z_log_var - tf.square(z_mean) - tf.exp(z_log_var)\n",
    "            kl_loss = tf.reduce_mean(kl_loss)\n",
    "            kl_loss *= -0.5\n",
    "            total_loss = reconstruction_loss + kl_loss\n",
    "        grads = tape.gradient(total_loss, self.trainable_weights)\n",
    "        self.optimizer.apply_gradients(zip(grads, self.trainable_weights))\n",
    "        return {\n",
    "            \"loss\": total_loss,\n",
    "            \"reconstruction_loss\": reconstruction_loss,\n",
    "            \"kl_loss\": kl_loss,\n",
    "        }"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Training the VAE Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 35.5245 - reconstruction_loss: 34.9504 - kl_loss: 0.5741\n",
      "Epoch 2/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 25.9553 - reconstruction_loss: 23.8121 - kl_loss: 2.1432\n",
      "Epoch 3/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 22.3931 - reconstruction_loss: 21.5081 - kl_loss: 0.8850\n",
      "Epoch 4/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 21.6528 - reconstruction_loss: 21.0137 - kl_loss: 0.6392\n",
      "Epoch 5/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 21.0403 - reconstruction_loss: 20.4015 - kl_loss: 0.6387\n",
      "Epoch 6/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 19.7471 - reconstruction_loss: 18.8916 - kl_loss: 0.8555\n",
      "Epoch 7/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 18.5463 - reconstruction_loss: 17.4847 - kl_loss: 1.0617\n",
      "Epoch 8/18\n",
      "20/20 [==============================] - 0s 8ms/step - loss: 17.6478 - reconstruction_loss: 16.4679 - kl_loss: 1.1799\n",
      "Epoch 9/18\n",
      "20/20 [==============================] - 0s 10ms/step - loss: 17.1433 - reconstruction_loss: 15.8946 - kl_loss: 1.2487\n",
      "Epoch 10/18\n",
      "20/20 [==============================] - 0s 12ms/step - loss: 16.7789 - reconstruction_loss: 15.5094 - kl_loss: 1.2695\n",
      "Epoch 11/18\n",
      "20/20 [==============================] - 0s 11ms/step - loss: 16.4832 - reconstruction_loss: 15.1916 - kl_loss: 1.2917\n",
      "Epoch 12/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 16.2910 - reconstruction_loss: 14.9789 - kl_loss: 1.3121\n",
      "Epoch 13/18\n",
      "20/20 [==============================] - 0s 10ms/step - loss: 16.1474 - reconstruction_loss: 14.8260 - kl_loss: 1.3214\n",
      "Epoch 14/18\n",
      "20/20 [==============================] - 0s 10ms/step - loss: 16.0542 - reconstruction_loss: 14.7198 - kl_loss: 1.3344\n",
      "Epoch 15/18\n",
      "20/20 [==============================] - 0s 10ms/step - loss: 15.9518 - reconstruction_loss: 14.6288 - kl_loss: 1.3230\n",
      "Epoch 16/18\n",
      "20/20 [==============================] - 0s 10ms/step - loss: 15.8908 - reconstruction_loss: 14.5741 - kl_loss: 1.3167\n",
      "Epoch 17/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 15.8282 - reconstruction_loss: 14.5053 - kl_loss: 1.3229\n",
      "Epoch 18/18\n",
      "20/20 [==============================] - 0s 9ms/step - loss: 15.7948 - reconstruction_loss: 14.4872 - kl_loss: 1.3075\n"
     ]
    }
   ],
   "source": [
    "vae = VAE(encoder, decoder)\n",
    "vae.compile(optimizer=keras.optimizers.Adam())\n",
    "history=vae.fit(X_train,\n",
    "        X_train, \n",
    "        epochs=18, \n",
    "        batch_size=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['reconstruction_loss'])\n",
    "plt.plot(history.history['kl_loss'])\n",
    "plt.title('History')\n",
    "plt.ylabel('Value')\n",
    "plt.xlabel('No.epoch')\n",
    "plt.legend(['loss', 'reconstruction','kl_loss'], loc='upper right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "reconstruction=0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reconstruct and Augment Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<tf.Tensor: shape=(2000, 55), dtype=float32, numpy=\n",
       "array([[9.8751229e-01, 1.4317036e-03, 2.3773811e-05, ..., 3.3252953e-05,\n",
       "        7.5147736e-01, 1.6781688e-03],\n",
       "       [1.2884885e-02, 7.5455695e-02, 2.5336176e-02, ..., 7.2166324e-04,\n",
       "        7.9645002e-01, 3.6859035e-02],\n",
       "       [9.1753143e-01, 3.5961270e-03, 1.0844590e-04, ..., 1.8447638e-04,\n",
       "        7.2405177e-01, 6.5756440e-03],\n",
       "       ...,\n",
       "       [9.7975749e-01, 3.2677025e-02, 6.1043501e-03, ..., 2.3361504e-02,\n",
       "        6.7661339e-01, 1.0594964e-01],\n",
       "       [9.5013463e-01, 1.4790267e-02, 4.4574440e-03, ..., 2.4031997e-03,\n",
       "        7.5596595e-01, 1.1743337e-02],\n",
       "       [9.8978496e-01, 1.7711818e-03, 5.0734830e-05, ..., 8.5441337e-05,\n",
       "        7.4953276e-01, 1.1111021e-02]], dtype=float32)>"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "z_mean, z_log_var, z = encoder(X_train)\n",
    "reconstruction=decoder(z)\n",
    "reconstruction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tf.Tensor(\n",
      "[[9.8471481e-01 2.3396909e-03 5.5969387e-05 ... 8.0923630e-05\n",
      "  7.5476164e-01 2.6976466e-03]\n",
      " [1.0317832e-02 2.0811796e-02 2.3207664e-03 ... 3.9312243e-04\n",
      "  7.7892423e-01 1.7879844e-02]\n",
      " [9.2564607e-01 3.8845837e-03 1.0432323e-04 ... 1.5532970e-04\n",
      "  7.2297817e-01 7.3409379e-03]\n",
      " ...\n",
      " [9.9211818e-01 1.6899914e-02 2.1110773e-03 ... 8.6102784e-03\n",
      "  7.1466476e-01 6.1040282e-02]\n",
      " [9.6003646e-01 5.8119804e-02 2.2918731e-02 ... 1.6240478e-02\n",
      "  7.2111279e-01 6.9874674e-02]\n",
      " [9.6056187e-01 1.6525775e-02 4.7210157e-03 ... 2.4457276e-03\n",
      "  6.7031592e-01 1.5510118e-01]], shape=(202000, 55), dtype=float32)\n",
      "tf.Tensor([0. 0. 0. ... 4. 0. 0.], shape=(202000,), dtype=float64)\n"
     ]
    }
   ],
   "source": [
    "z_mean, z_log_var, z = encoder(X_train)\n",
    "reconstruction=decoder(z)\n",
    "X_train=tf.convert_to_tensor(X_train)\n",
    "y_train=tf.convert_to_tensor(y_train)\n",
    "fin_X_train=X_train\n",
    "fin_y_train=y_train\n",
    "for i in range(100):\n",
    "    z_mean, z_log_var, z = encoder(X_train)\n",
    "    reconstruction=tf.concat([reconstruction,decoder(z)],0)\n",
    "    fin_y_train=tf.concat([fin_y_train,y_train],0)\n",
    "print(reconstruction)\n",
    "print(fin_y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"functional_7\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input_8 (InputLayer)         [(None, 55)]              0         \n",
      "_________________________________________________________________\n",
      "dense_8 (Dense)              (None, 128)               7168      \n",
      "_________________________________________________________________\n",
      "dense_9 (Dense)              (None, 5)                 645       \n",
      "=================================================================\n",
      "Total params: 7,813\n",
      "Trainable params: 7,813\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "inp = Input((55,))\n",
    "x = Dense(128, activation='relu')(inp)\n",
    "out = Dense(5, activation='softmax')(x)\n",
    "model = Model(inp, out)\n",
    "model.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Prediction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "63/63 [==============================] - 0s 649us/step - loss: 0.5073 - accuracy: 0.8705\n",
      "Epoch 2/10\n",
      "63/63 [==============================] - 0s 617us/step - loss: 0.2263 - accuracy: 0.9310\n",
      "Epoch 3/10\n",
      "63/63 [==============================] - 0s 538us/step - loss: 0.1474 - accuracy: 0.9615\n",
      "Epoch 4/10\n",
      "63/63 [==============================] - 0s 728us/step - loss: 0.1099 - accuracy: 0.9730\n",
      "Epoch 5/10\n",
      "63/63 [==============================] - 0s 665us/step - loss: 0.0888 - accuracy: 0.9750\n",
      "Epoch 6/10\n",
      "63/63 [==============================] - 0s 728us/step - loss: 0.0725 - accuracy: 0.9805\n",
      "Epoch 7/10\n",
      "63/63 [==============================] - 0s 522us/step - loss: 0.0606 - accuracy: 0.9820\n",
      "Epoch 8/10\n",
      "63/63 [==============================] - 0s 602us/step - loss: 0.0523 - accuracy: 0.9845\n",
      "Epoch 9/10\n",
      "63/63 [==============================] - 0s 586us/step - loss: 0.0459 - accuracy: 0.9875\n",
      "Epoch 10/10\n",
      "63/63 [==============================] - 0s 538us/step - loss: 0.0420 - accuracy: 0.9895\n"
     ]
    }
   ],
   "source": [
    "inp = Input((55,))\n",
    "x = Dense(128, activation='relu')(inp)\n",
    "out = Dense(5, activation='softmax')(x)\n",
    "model2 = Model(inp, out)\n",
    "model2.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
    "history2 = model2.fit(X_train, y_train, epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history.history['loss'])\n",
    "plt.plot(history.history['accuracy'])\n",
    "plt.title('History')\n",
    "plt.ylabel('Value')\n",
    "plt.xlabel('No.epoch')\n",
    "plt.legend(['loss', 'accuracy'], loc='center right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix, plot_confusion_matrix\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "class_names=['0','1','2','3','4']\n",
    "predict=model2.predict(X_test)\n",
    "predict=pd.DataFrame(predict)\n",
    "predict=predict.idxmax(axis=1)\n",
    "predict=np.array(predict)\n",
    "cm=confusion_matrix(y_test,predict,normalize='true')\n",
    "fig, ax = plt.subplots(figsize=(5,5))\n",
    "sns.heatmap(cm,annot=True,xticklabels=class_names,yticklabels=class_names,ax=ax)\n",
    "plt.xlabel(\"Predicted label\")\n",
    "plt.ylabel(\"True label\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "6313/6313 [==============================] - 4s 616us/step - loss: 0.0747 - accuracy: 0.9746\n",
      "Epoch 2/10\n",
      "6313/6313 [==============================] - 4s 661us/step - loss: 0.0449 - accuracy: 0.9837\n",
      "Epoch 3/10\n",
      "6313/6313 [==============================] - 4s 646us/step - loss: 0.0347 - accuracy: 0.9875\n",
      "Epoch 4/10\n",
      "6313/6313 [==============================] - 4s 671us/step - loss: 0.0297 - accuracy: 0.9890\n",
      "Epoch 5/10\n",
      "6313/6313 [==============================] - 5s 740us/step - loss: 0.0267 - accuracy: 0.9902\n",
      "Epoch 6/10\n",
      "6313/6313 [==============================] - 4s 690us/step - loss: 0.0246 - accuracy: 0.9907\n",
      "Epoch 7/10\n",
      "6313/6313 [==============================] - 5s 722us/step - loss: 0.0229 - accuracy: 0.9913\n",
      "Epoch 8/10\n",
      "6313/6313 [==============================] - 5s 733us/step - loss: 0.0218 - accuracy: 0.9916\n",
      "Epoch 9/10\n",
      "6313/6313 [==============================] - 4s 601us/step - loss: 0.0207 - accuracy: 0.9920\n",
      "Epoch 10/10\n",
      "6313/6313 [==============================] - 4s 666us/step - loss: 0.0201 - accuracy: 0.9924\n"
     ]
    }
   ],
   "source": [
    "inp = Input((55,))\n",
    "x = Dense(128, activation='relu')(inp)\n",
    "out = Dense(5, activation='softmax')(x)\n",
    "model3 = Model(inp, out)\n",
    "model3.compile(loss='sparse_categorical_crossentropy',optimizer='adam',metrics=['accuracy'])\n",
    "history3 = model3.fit(reconstruction, fin_y_train, epochs=10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(history3.history['loss'])\n",
    "plt.plot(history3.history['accuracy'])\n",
    "plt.title('History')\n",
    "plt.ylabel('Value')\n",
    "plt.xlabel('No.epoch')\n",
    "plt.legend(['loss', 'accuracy'], loc='center right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "class_names=['0','1','2','3','4']\n",
    "predict=model3.predict(X_test)\n",
    "predict=pd.DataFrame(predict)\n",
    "predict=predict.idxmax(axis=1)\n",
    "predict=np.array(predict)\n",
    "cm=confusion_matrix(y_test,predict,normalize='true')\n",
    "fig, ax = plt.subplots(figsize=(5,5))\n",
    "sns.heatmap(cm,annot=True,xticklabels=class_names,yticklabels=class_names,ax=ax)\n",
    "plt.xlabel(\"Predicted label\")\n",
    "plt.ylabel(\"True label\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
